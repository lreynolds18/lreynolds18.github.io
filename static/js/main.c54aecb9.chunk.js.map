{"version":3,"sources":["Root/menu.js","Projects/index.js","About/buttons.js","About/index.js","Work/index.js","Root/index.js","serviceWorker.js","index.js"],"names":["RootMenu","react_default","a","createElement","Menu","Item","name","Link","to","Component","Projects","project","index","Grid","columns","key","Row","title","date","stack","player","map","vid","idx","ReactPlayer_default","url","controls","overview","line","images","image","Image","src","label","_this","this","Container","resource","Title","renderSingleProject","Buttons","Button","color","href","io","About","divided","Column","alt","ImageAlt","size","circular","Header1","Header2","Header3","buttons_Buttons","Projects_Projects","Work","Jobs","job","Company","Description","desc","Root","HashRouter","menu_RootMenu","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Root_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c54aecb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu } from 'semantic-ui-react';\n\nexport default class RootMenu extends Component {\n  render() {\n    return (\n      <Menu>\n        <Menu.Item\n          name='about'\n        >\n          <Link to='/about'>About</Link>\n        </Menu.Item>\n\n        <Menu.Item\n          name='projects'\n        >\n          <Link to='/projects'>Projects</Link>\n        </Menu.Item>\n\n        <Menu.Item\n          name='work'\n        >\n          <Link to='/work'>Work Experience</Link>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Image } from 'semantic-ui-react';\nimport ReactPlayer from 'react-player';\n\nimport resource from '../resource';\n\nexport default class Projects extends Component {\n  renderSingleProject(project, index) {\n    return (\n      <Grid columns={1} key={index}>\n        <Grid.Row>\n          <h2>{ project.title }</h2>\n          <h4>{ project.date }</h4>\n        </Grid.Row>\n\n        <Grid.Row>\n          <h3>{ project.stack }</h3>\n        </Grid.Row>\n\n        {project.player.map((vid, idx) =>\n          <Grid.Row key={idx}>\n            <ReactPlayer url={vid} controls />\n          </Grid.Row>\n        )}\n\n        <Grid.Row>\n          {project.overview.map((line, idx) =>\n            <p key={idx}>{ line }</p>\n          )}\n        </Grid.Row>\n\n        {project.images.map((image, idx) =>\n          <Grid.Row key={idx}>\n            <Image src={image.url} />\n            <p>{ image.label }</p>\n          </Grid.Row>\n        )}\n      </Grid>\n    );\n  }\n\n  render() {\n    return (\n      <Container>\n        <h1>{ resource.Projects.Title }</h1>\n\n        {resource.Projects.Projects.map((project, idx) =>\n          { return this.renderSingleProject(project, idx) }\n        )}\n      </Container>      \n    );\n  }\n} \n","import React, { Component } from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { IoIosMail, IoLogoGithub, IoLogoLinkedin } from 'react-icons/io';\n\nexport default class Buttons extends Component {\n  render() {\n    return (\n      <div>\n        <Button\n          color='google plus'\n          href='mailto:lreynolds18@gmail.com'\n        ><IoIosMail /> Email</Button>\n        <Button\n          color='grey'\n          href='https://github.com/lreynolds18'\n        ><IoLogoGithub /> Github</Button>\n        <Button\n          color='linkedin'\n          href='https://www.linkedin.com/in/lreynolds18/'\n        ><IoLogoLinkedin /> Linkedin</Button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Grid, Image } from 'semantic-ui-react';\n\nimport Projects from '../Projects';\nimport AboutButtons from './buttons';\nimport resource from '../resource';\n\nexport default class About extends Component {\n  render() {\n    const imageLink = './mexico.jpg';\n\n    return (\n      <Container>\n        <h1>{ resource.About.Title }</h1>\n        <Grid columns={2} divided>\n          <Grid.Row>\n            <Grid.Column>\n              <Image src={ imageLink } alt={ resource.About.ImageAlt } size='large' circular />\n            </Grid.Column>\n\n            <Grid.Column>\n              <h3>{ resource.About.Header1 }</h3>\n              <p>{ resource.About.Header2 }</p>\n              <p>{ resource.About.Header3 }</p>\n              <AboutButtons />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n\n        <br />\n\n        <Projects />\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container, Grid } from 'semantic-ui-react';\n\nimport resource from '../resource';\n\nexport default class Work extends Component {\n  render() {\n    return (\n      <Container>\n        <h1>{ resource.Work.Title }</h1>\n        <Grid>\n          {resource.Work.Jobs.map(function(job, index) {\n            return (\n              <Grid.Row key={ index }>\n                <Grid.Column>\n                  <h3>{ job.Company }</h3> \n                  {job.Description.map(function(desc, idx) {\n                    return <p key={ idx }>{ desc }</p>;\n                  })}\n                </Grid.Column>\n              </Grid.Row>\n            );\n          })}\n        </Grid>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport RootMenu from './menu';\nimport About from '../About';\nimport Projects from '../Projects';\nimport Work from '../Work';\n\nexport default class Root extends Component {\n  render() {\n    return (\n        <HashRouter>\n          <div>\n            <RootMenu />\n\n            <Route exact path=\"/\" component={About}/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/projects\" component={Projects}/>\n            <Route path=\"/work\" component={Work}/>\n          </div>\n        </HashRouter>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}